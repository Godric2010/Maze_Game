name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

env:
  CMAKE_BUILD_TYPE: Release
  VCPKG_COMMIT: 1d86fc5936d17f8fc77b17634627b746e2f7145a

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest ]
    env:
      CC: clang
      CXX: clang++

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get CMake & Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.31.x
          ninjaVersion: latest

      - name: Setup vcpkg (manifest + cache)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
          vcpkgJsonGlob: 'vcpkg.json'
          runVcpkgInstall: true

      - name: Configure (CMake)
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
           export CC=clang
           export CXX=clang++
           cmake -S . -B build -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
              -DENABLE_COVERAGE=ON
          else
            cmake -S . -B build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
          fi

      - name: Build
        shell: bash
        run: cmake --build build  --parallel

      - name: Test
        shell: bash
        run: |
          if [ "${{ startsWith(matrix.os, 'macos') }}" == "true" ]; then 
            mkdir -p build/coverage/raw
            export LLVM_PROFILE_FILE="$PWD/build/coverage/raw/%p-%m.profraw"
          fi
          ctest --test-dir build --output-on-failure --timeout 180  --output-junit build/test-results.xml

      - name: Install LLVM Tools (macOS only)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          set -euo pipefail
          if xcrun -f llvm-cov >/dev/null 2>&1 && xcrun -f llvm-profdata >/dev/null 2>&1; then
            LLVM_BIN="$(dirname "$(xcrun -f llvm-cov)")"
            echo "Using Xcode's LLVM tools at: $LLVM_BIN"
            export PATH="$LLVM_BIN:$PATH"
            echo "$LLVM_BIN" >> "$GITHUB_PATH"
          else
            echo "Xcode LLVM tools not found, install via Homebrew..."
            brew update
            brew install llvm
            LLVM_BIN="$(brew --prefix llvm)/bin"
            echo "Using Homebrew LLVM tools at: $LLVM_BIN"
            export PATH="$LLVM_BIN:$PATH"
            echo "$LLVM_BIN" >>"$GITHUB_PATH"
          fi
          
          which llvm-cov
          which llvm-profdata
          llvm-cov --version
          llvm-profdata --version

      - name: Generate Coverage (macOS only)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          chmod +x scripts/coverage.sh
          ./scripts/coverage.sh build

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{ matrix.os }}
          path: |
            build/test-results.xml
            build/Testing/Temporary/LastTest.log
          if-no-files-found: ignore

      - name: Upload coverage artifacts (macOS only)
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: coverage-macos
          path: |
            build/coverage/summary.txt
            build/coverage/html
          if-no-files-found: error