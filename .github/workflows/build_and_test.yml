name: CI

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

env:
  CMAKE_BUILD_TYPE: Release
  VCPKG_COMMIT: 1d86fc5936d17f8fc77b17634627b746e2f7145a

jobs:
  build-and-test:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-latest, windows-latest ]
    env:
      CC: clang
      CXX: clang++

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get CMake & Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.31.x
          ninjaVersion: latest

      - name: Setup vcpkg (manifest + cache)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}
          vcpkgJsonGlob: 'vcpkg.json'
          runVcpkgInstall: true

      - name: Configure (CMake)
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
           export CC=clang
           export CXX=clang++
           cmake -S . -B build -G Ninja \
              -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake" \
              -DENABLE_COVERAGE=ON
          else
            cmake -S . -B build -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
          fi

      - name: Build
        shell: bash
        run: cmake --build build  --parallel

      - name: Test
        shell: bash
        run: |
          set -euo pipefail
          if [[ "$RUNNER_OS" == "macOS" ]]; then 
            mkdir -p build/coverage/raw
            export LLVM_PROFILE_FILE="$PWD/build/coverage/raw/%p-%m.profraw"
          fi
          
          echo "== Tool version =="
          cmake --version
          ctest --version
          
          echo "== What CTest will run =="
          ctest --test-dir build -N
          
          echo "== Running tests (JUnit to build/test-results.xml) =="
          
          ctest --test-dir build --output-on-failure --timeout 180
          

      - name: Install LLVM Tools (macOS only)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          set -euo pipefail
          if xcrun -f llvm-cov >/dev/null 2>&1 && xcrun -f llvm-profdata >/dev/null 2>&1; then
            LLVM_BIN="$(dirname "$(xcrun -f llvm-cov)")"
            echo "Using Xcode's LLVM tools at: $LLVM_BIN"
            export PATH="$LLVM_BIN:$PATH"
            echo "$LLVM_BIN" >> "$GITHUB_PATH"
          else
            echo "Xcode LLVM tools not found, install via Homebrew..."
            brew update
            brew install llvm
            LLVM_BIN="$(brew --prefix llvm)/bin"
            echo "Using Homebrew LLVM tools at: $LLVM_BIN"
            export PATH="$LLVM_BIN:$PATH"
            echo "$LLVM_BIN" >>"$GITHUB_PATH"
          fi
          
          which llvm-cov
          which llvm-profdata
          llvm-cov --version
          llvm-profdata --version

      - name: Generate Coverage (macOS only)
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          chmod +x scripts/coverage.sh
          ./scripts/coverage.sh build

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tests-${{ matrix.os }}
          path: |
            build/junit/*.xml
            build/Testing/Temporary/LastTest.log
          if-no-files-found: ignore

      - name: Upload coverage artifacts (macOS only)
        if: startsWith(matrix.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: coverage-macos
          path: |
            build/coverage/summary.txt
            build/coverage/html
          if-no-files-found: error

  notify-discord:
    name: Notify-Discord
    needs: [ build-and-test ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download artifacts (tests + coverage)
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Ensure jq (for JSON)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Compute per-OS test status + coverage
        id: compute
        shell: bash
        run: |
          set -euo pipefail
          
          echo "Computing artifacts ... macOS test results"
          MACOS_DIR="artifacts/tests-macos-latest/build/junit"
          MACOS_STATUS="❓"
          if [[ -d "$MACOS_DIR" ]]; then
            MACOS_FAILS=$(grep -ho 'failures="[0-9]\+"' "$MACOS_DIR"/*.xml 2>/dev/null | sed 's/[^0-9]//g' | awk '{s+=$1} END{print s+0}') 
            MACOS_ERRORS=$(grep -ho 'errors="[0-9]\+"' "$MACOS_DIR"/*.xml 2>/dev/null | sed 's/[^0-9]//g' | awk '{s+=$1} END{print s+0}') 
            if [[ "${MACOS_FAILS:-0}" = "0" && "${MACOS_ERRORS:-0}" = "0" ]]; then
              MACOS_STATUS="✅"
            else
              MACOS_STATUS="❌"
            fi
          fi
          
          echo "Computing artifacts ... windows test results"
          WIN_DIR="artifacts/tests-windows-latest/build/junit"
          WIN_STATUS="❓"
          if [[ -d "$WIN_DIR" ]]; then
            WIN_FAILS=$(grep -ho 'failures="[0-9]\+"' "$WIN_DIR"/*.xml 2>/dev/null | sed 's/[^0-9]//g' | awk '{s+=$1} END{print s+0}') 
            WIN_ERRORS=$(grep -ho 'errors="[0-9]\+"' "$WIN_DIR"/*.xml 2>/dev/null | sed 's/[^0-9]//g' | awk '{s+=$1} END{print s+0}') 
            if [[ "${WIN_FAILS:-0}" = "0" && "${WIN_ERRORS:-0}" = "0" ]]; then
              WIN_STATUS="✅"
            else
              WIN_STATUS="❌"
            fi
          fi
          
          echo "Computing artifacts ... coverage percentage"
          COV_SUM="artifacts/coverage-macos/summary.txt"
          COV_PCT="n/a"
          if [[ -f "$COV_SUM" ]]; then
            LINE=$(grep -E '^TOTAL' "$COV_SUM" || true)
            if [[ -n "$LINE" ]]; then
              COV_PCT="$(echo "$LINE" | grep -Eo '[0-9]+(\.[0-9]+)?%' | tail -n1 || true)"
              [[ -z "$COV_PCT" ]] && COV_PCT="n/a"
            fi
          fi
          
          echo "DGB macOS=$MACOS_STATUS Win=$WIN_STATUS Cov=$COV_PCT"
          
          {
            echo "macos_status<<EOF"
            echo "${MACOS_STATUS}"
            echo "EOF"
            echo "windows_status<<EOF"
            echo "${WIN_STATUS}"
            echo "EOF"
            echo "coverage_pct<<EOF"
            echo "${COV_PCT}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Post to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_BOT }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          REF_NAME: ${{ github.ref_name }}
          MACOS: ${{ steps.compute.outputs.macos_status }}
          WINDOWS: ${{ steps.compute.outputs.windows_status }}
          COV: ${{ steps.compute.outputs.coverage_pct }}
        shell: bash
        run: |
          set -euo pipefail
          CONTENT="**CI Results** (${REF_NAME})
                  macOS: ${MACOS}
                  Windows: ${WINDOWS}
                  Coverage (macOS): ${COV}
                  RUN: ${RUN_URL}"
          
          curl -sS -X POST \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg c "$CONTENT" '{content:$c}')" \
              "${DISCORD_WEBHOOK_URL}"